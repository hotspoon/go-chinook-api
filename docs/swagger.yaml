definitions:
  models.Album:
    properties:
      artist_id:
        type: integer
      id:
        type: integer
      title:
        type: string
    type: object
  models.Artist:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.Customer:
    properties:
      address:
        type: string
      city:
        type: string
      company:
        type: string
      country:
        type: string
      customer_id:
        type: integer
      email:
        type: string
      fax:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone:
        type: string
      postal_code:
        type: string
      state:
        type: string
      support_rep_id:
        type: integer
    type: object
  models.Employee:
    properties:
      BirthDate:
        $ref: '#/definitions/utils.DateOnly'
      HireDate:
        $ref: '#/definitions/utils.DateOnly'
      address:
        type: string
      city:
        type: string
      country:
        type: string
      email:
        type: string
      employee_id:
        type: integer
      fax:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone:
        type: string
      postal_code:
        type: string
      reports_to:
        type: integer
      state:
        type: string
      title:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.Genre:
    properties:
      genre_id:
        type: integer
      name:
        type: string
    type: object
  models.Invoice:
    properties:
      billing_address:
        type: string
      billing_city:
        type: string
      billing_country:
        type: string
      billing_postal_code:
        type: string
      billing_state:
        type: string
      customer_id:
        type: integer
      invoice_date:
        type: string
      invoice_id:
        type: integer
      total:
        type: number
    type: object
  models.LoginRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  models.Me:
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  models.MediaType:
    properties:
      media_type_id:
        type: integer
      name:
        type: string
    type: object
  models.Playlist:
    properties:
      name:
        type: string
      playlist_id:
        type: integer
    type: object
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.SignupRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.Track:
    properties:
      album_id:
        type: integer
      bytes:
        type: integer
      composer:
        type: string
      genre_id:
        type: integer
      media_type_id:
        type: integer
      milliseconds:
        type: integer
      name:
        type: string
      track_id:
        type: integer
      unit_price:
        type: number
    type: object
  utils.DateOnly:
    properties:
      time.Time:
        type: string
    type: object
info:
  contact: {}
  description: RESTful API for Chinook database
  title: Chinook API
  version: "1.0"
paths:
  /api/v1/albums:
    get:
      description: Returns a list of all albums
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Album'
            type: array
      security:
      - BearerAuth: []
      summary: Get all albums
      tags:
      - albums
  /api/v1/albums/{id}:
    get:
      description: Returns a single album by ID
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Album'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get album by ID
      tags:
      - albums
  /api/v1/artists:
    get:
      description: Returns a list of all artists
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Artist'
            type: array
      security:
      - BearerAuth: []
      summary: Get all artists
      tags:
      - artists
    post:
      consumes:
      - application/json
      description: Creates a new artist
      parameters:
      - description: Artist to create
        in: body
        name: artist
        required: true
        schema:
          $ref: '#/definitions/models.Artist'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Artist'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new artist
      tags:
      - artists
  /api/v1/artists/{id}:
    delete:
      description: Deletes an artist by ID
      parameters:
      - description: Artist ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete an artist
      tags:
      - artists
    get:
      description: Returns a single artist by ID
      parameters:
      - description: Artist ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Artist'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get artist by ID
      tags:
      - artists
    put:
      consumes:
      - application/json
      description: Updates an existing artist by ID
      parameters:
      - description: Artist ID
        in: path
        name: id
        required: true
        type: integer
      - description: Artist data to update
        in: body
        name: artist
        required: true
        schema:
          $ref: '#/definitions/models.Artist'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Artist'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update an artist
      tags:
      - artists
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - auth
  /api/v1/auth/logout:
    post:
      description: Logs out the user by deleting the refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User logout
      tags:
      - auth
  /api/v1/auth/me:
    get:
      description: Returns the authenticated user's information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Me'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get current user
      tags:
      - auth
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Returns a new JWT token given a valid refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh access token
      tags:
      - auth
  /api/v1/auth/signup:
    post:
      consumes:
      - application/json
      description: Registers a new user
      parameters:
      - description: User signup data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.SignupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User signup
      tags:
      - auth
  /api/v1/customers:
    get:
      description: Returns a list of all customers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Customer'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all customers
      tags:
      - customers
  /api/v1/customers/{id}:
    get:
      description: Returns a single customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Customer'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get customer by ID
      tags:
      - customers
  /api/v1/employees:
    get:
      description: Returns a list of all employees
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Employee'
            type: array
      security:
      - BearerAuth: []
      summary: Get all employees
      tags:
      - employees
  /api/v1/employees/{id}:
    get:
      description: Returns a single employee by ID
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Employee'
      security:
      - BearerAuth: []
      summary: Get employee by ID
      tags:
      - employees
  /api/v1/genres:
    get:
      description: Returns a list of all genres
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Genre'
            type: array
      security:
      - BearerAuth: []
      summary: Get all genres
      tags:
      - genres
  /api/v1/genres/{id}:
    get:
      description: Returns a single genre by ID
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Genre'
      security:
      - BearerAuth: []
      summary: Get genre by ID
      tags:
      - genres
  /api/v1/invoices:
    get:
      description: Returns a list of all invoices
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Invoice'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all invoices
      tags:
      - invoices
  /api/v1/invoices/{id}:
    get:
      description: Returns a single invoice by ID
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Invoice'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get invoice by ID
      tags:
      - invoices
  /api/v1/media_types:
    get:
      description: Returns a list of all media types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.MediaType'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all media types
      tags:
      - media_types
  /api/v1/media_types/{id}:
    get:
      description: Returns a single media type by ID
      parameters:
      - description: Media Type ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MediaType'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get media type by ID
      tags:
      - media_types
  /api/v1/playlists:
    get:
      description: Returns a list of all playlists
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Playlist'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all playlists
      tags:
      - playlists
  /api/v1/playlists/{id}:
    get:
      description: Returns a single playlist by ID
      parameters:
      - description: Playlist ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Playlist'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get playlist by ID
      tags:
      - playlists
  /api/v1/playlists/{playlistId}/tracks:
    get:
      description: Returns a list of all tracks in a specific playlist
      parameters:
      - description: Playlist ID
        in: path
        name: playlistId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Track'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all tracks in a playlist
      tags:
      - playlist_tracks
  /api/v1/tracks:
    get:
      description: Returns a list of all tracks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Track'
            type: array
      security:
      - BearerAuth: []
      summary: Get all tracks
      tags:
      - tracks
  /api/v1/tracks/{id}:
    get:
      description: Returns a single track by ID
      parameters:
      - description: Track ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Track'
      security:
      - BearerAuth: []
      summary: Get track by ID
      tags:
      - tracks
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
